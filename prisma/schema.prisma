generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Password {
  id     String @id @default(cuid())
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passwords")
}

model PortfolioSession {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_sessions")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  bio              String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  googleId         String?           @unique
  sessions         Session[]
  domains          Domain[]
  password         Password?
  portfolioSession PortfolioSession?
  portfolios       Portfolio[]
  stripeCustomerId String?           @unique  // nullable
  isSubscribed     Boolean           @default(false)  // Simple subscription flag

  @@map("users")
}

model Portfolio {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  pieces      Piece[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model Piece {
  id             Int       @id @default(autoincrement())
  title          String
  slug           String    @unique
  description    String?
  fullImageUrl   String
  blurImageUrl   String
  medium         String?
  dimensions     String?
  year           Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  portfolioId    Int
  uploadThingKey String
  portfolio      Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("pieces")
}

model Session {
  id      String   @id @default(cuid())
  user_id String
  expires DateTime
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Domain {
  id        String   @id @default(cuid())
  domain    String   @unique
  verified  Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("domains")
}
